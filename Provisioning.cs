///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SSPC_iOS
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Provisioning recording.
    /// </summary>
    [TestModule("c623303e-27fe-4914-b669-cbcffdf3b2bb", ModuleType.Recording, 1)]
    public partial class Provisioning : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SSPC_Android_BVTRepository repository.
        /// </summary>
        public static SSPC_Android_BVTRepository repo = SSPC_Android_BVTRepository.Instance;

        static Provisioning instance = new Provisioning();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Provisioning()
        {
            WifiPassword = "satkabirdaya";
            Nickname = "Sump Controller";
            DeviceID = "PNR02SPC1000008091";
            Wifissid = "satsaheb";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Provisioning Instance
        {
            get { return instance; }
        }

#region Variables

        string _WifiPassword;

        /// <summary>
        /// Gets or sets the value of variable WifiPassword.
        /// </summary>
        [TestVariable("2b1b279d-7d81-4aa2-8308-8e098b092f10")]
        public string WifiPassword
        {
            get { return _WifiPassword; }
            set { _WifiPassword = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable DeviceID.
        /// </summary>
        [TestVariable("84902cad-a599-4713-a3d3-2ea660932c8b")]
        public string DeviceID
        {
            get { return repo.DeviceID; }
            set { repo.DeviceID = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Wifissid.
        /// </summary>
        [TestVariable("9bfe522f-73aa-4b08-aa4f-8fe951071a0e")]
        public string Wifissid
        {
            get { return repo.Wifissid; }
            set { repo.Wifissid = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Nickname.
        /// </summary>
        [TestVariable("aa74b70b-cbcd-4604-8ca2-b53b49661b48")]
        public string Nickname
        {
            get { return repo.Nickname; }
            set { repo.Nickname = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(0));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.UIWindow.AddADevice' at Center", repo.ComPentairPentairhome.UIWindow.AddADeviceInfo, new RecordItemIndex(1));
            repo.ComPentairPentairhome.UIWindow.AddADevice.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(2));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.UIWindow.SumpController' at Center", repo.ComPentairPentairhome.UIWindow.SumpControllerInfo, new RecordItemIndex(3));
            repo.ComPentairPentairhome.UIWindow.SumpController.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(4));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.UIWindow.ContinueonProvisiom' at Center", repo.ComPentairPentairhome.UIWindow.ContinueonProvisiomInfo, new RecordItemIndex(5));
            repo.ComPentairPentairhome.UIWindow.ContinueonProvisiom.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(6));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Touch gestures", "Swipe gesture with direction 'Up (270°)' starting from 'Center' with distance '3.0' with swipe duration'500ms' and step count '0' on item 'ComPentairPentairhome.setupBluetoothScerollUp'.", repo.ComPentairPentairhome.setupBluetoothScerollUpInfo, new RecordItemIndex(7));
            repo.ComPentairPentairhome.setupBluetoothScerollUp.Swipe(Location.Center, ValueConverter.ArgumentFromString<Ranorex.Core.Recorder.Touch.GestureDirection>("SwipeDirection", "Up (270°)"), ValueConverter.ArgumentFromString<Ranorex.Core.Distance>("Distance", "3.0"), ValueConverter.ArgumentFromString<Ranorex.Duration>("SwipeDuration", "500ms"), 0);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(8));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.UIWindow.BluetoothContinue' at Center", repo.ComPentairPentairhome.UIWindow.BluetoothContinueInfo, new RecordItemIndex(9));
            repo.ComPentairPentairhome.UIWindow.BluetoothContinue.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(10));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ComPentairPentairhome.UIWindow.DeviceSelection'", repo.ComPentairPentairhome.UIWindow.DeviceSelectionInfo, new ActionTimeout(30000), new RecordItemIndex(11));
            repo.ComPentairPentairhome.UIWindow.DeviceSelectionInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(12));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.UIWindow.DeviceSelection' at Center", repo.ComPentairPentairhome.UIWindow.DeviceSelectionInfo, new RecordItemIndex(13));
            repo.ComPentairPentairhome.UIWindow.DeviceSelection.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(14));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.UIWindow.ConnectionEstablishedContinue' at Center", repo.ComPentairPentairhome.UIWindow.ConnectionEstablishedContinueInfo, new RecordItemIndex(15));
            repo.ComPentairPentairhome.UIWindow.ConnectionEstablishedContinue.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(16));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.UIWindow.WifiSelection' at Center", repo.ComPentairPentairhome.UIWindow.WifiSelectionInfo, new RecordItemIndex(17));
            repo.ComPentairPentairhome.UIWindow.WifiSelection.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 4s.", new RecordItemIndex(18));
            Delay.Duration(4000, false);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$WifiPassword' on item 'ComPentairPentairhome.UIWindow.WifiPasswordinput'.", repo.ComPentairPentairhome.UIWindow.WifiPasswordinputInfo, new RecordItemIndex(19));
            repo.ComPentairPentairhome.UIWindow.WifiPasswordinput.Element.SetAttributeValue("Text", WifiPassword);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(20));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.UIWindow.WifiContinue' at Center", repo.ComPentairPentairhome.UIWindow.WifiContinueInfo, new RecordItemIndex(21));
            repo.ComPentairPentairhome.UIWindow.WifiContinue.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1m.", new RecordItemIndex(22));
            Delay.Duration(60000, false);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Touch() on item 'ComPentairPentairhome.UIWindow.AddressContinue'.", repo.ComPentairPentairhome.UIWindow.AddressContinueInfo, new RecordItemIndex(23));
            repo.ComPentairPentairhome.UIWindow.AddressContinue.Element.InvokeActionWithText("Touch");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(24));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Touch() on item 'ComPentairPentairhome.UIWindow.NicknameInput'.", repo.ComPentairPentairhome.UIWindow.NicknameInputInfo, new RecordItemIndex(25));
            repo.ComPentairPentairhome.UIWindow.NicknameInput.Element.InvokeActionWithText("Touch");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(26));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '' on item 'ComPentairPentairhome.UIWindow.NicknameInput'.", repo.ComPentairPentairhome.UIWindow.NicknameInputInfo, new RecordItemIndex(27));
            repo.ComPentairPentairhome.UIWindow.NicknameInput.Element.SetAttributeValue("Text", "");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(28));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$Nickname' on item 'ComPentairPentairhome.UIWindow.NicknameInput'.", repo.ComPentairPentairhome.UIWindow.NicknameInputInfo, new RecordItemIndex(29));
            repo.ComPentairPentairhome.UIWindow.NicknameInput.Element.SetAttributeValue("Text", Nickname);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(30));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.UIWindow.NicknameSave' at Center", repo.ComPentairPentairhome.UIWindow.NicknameSaveInfo, new RecordItemIndex(31));
            repo.ComPentairPentairhome.UIWindow.NicknameSave.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(32));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Touch() on item 'ComPentairPentairhome.UIWindow.InstallationCompleteContinue'.", repo.ComPentairPentairhome.UIWindow.InstallationCompleteContinueInfo, new RecordItemIndex(33));
            repo.ComPentairPentairhome.UIWindow.InstallationCompleteContinue.Element.InvokeActionWithText("Touch");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(34));
            Delay.Duration(2000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.NotificationsContinue' at Center", repo.ComPentairPentairhome.NotificationsContinueInfo, new RecordItemIndex(35));
                repo.ComPentairPentairhome.NotificationsContinue.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(35)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(36));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.HomeIcon' at Center", repo.ComPentairPentairhome.HomeIconInfo, new RecordItemIndex(37));
            repo.ComPentairPentairhome.HomeIcon.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(38));
            Delay.Duration(2000, false);
            
            try {
                Report.Log(ReportLevel.Info, "Touch", "(Optional Action)\r\nTouch item 'ComPentairPentairhome.AppFeedbackClose' at Center", repo.ComPentairPentairhome.AppFeedbackCloseInfo, new RecordItemIndex(39));
                repo.ComPentairPentairhome.AppFeedbackClose.Touch();
                Delay.Milliseconds(300);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(39)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(40));
            Delay.Duration(2000, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "Home Dashboard", repo.ComPentairPentairhome.UIWindow.ScreenShot, false, new RecordItemIndex(41));
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(42));
            Delay.Duration(2000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
